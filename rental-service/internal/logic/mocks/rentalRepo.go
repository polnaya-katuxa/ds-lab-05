// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/polnaya-katuxa/ds-lab-02/rental-service/internal/models"

	uuid "github.com/google/uuid"
)

// RentalRepo is an autogenerated mock type for the rentalRepo type
type RentalRepo struct {
	mock.Mock
}

type RentalRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *RentalRepo) EXPECT() *RentalRepo_Expecter {
	return &RentalRepo_Expecter{mock: &_m.Mock}
}

// ChangeStatus provides a mock function with given fields: ctx, uid, status
func (_m *RentalRepo) ChangeStatus(ctx context.Context, uid uuid.UUID, status models.RentStatus) error {
	ret := _m.Called(ctx, uid, status)

	if len(ret) == 0 {
		panic("no return value specified for ChangeStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.RentStatus) error); ok {
		r0 = rf(ctx, uid, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RentalRepo_ChangeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeStatus'
type RentalRepo_ChangeStatus_Call struct {
	*mock.Call
}

// ChangeStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - uid uuid.UUID
//   - status models.RentStatus
func (_e *RentalRepo_Expecter) ChangeStatus(ctx interface{}, uid interface{}, status interface{}) *RentalRepo_ChangeStatus_Call {
	return &RentalRepo_ChangeStatus_Call{Call: _e.mock.On("ChangeStatus", ctx, uid, status)}
}

func (_c *RentalRepo_ChangeStatus_Call) Run(run func(ctx context.Context, uid uuid.UUID, status models.RentStatus)) *RentalRepo_ChangeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.RentStatus))
	})
	return _c
}

func (_c *RentalRepo_ChangeStatus_Call) Return(_a0 error) *RentalRepo_ChangeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RentalRepo_ChangeStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.RentStatus) error) *RentalRepo_ChangeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, rent
func (_m *RentalRepo) Create(ctx context.Context, rent models.Rent) (*models.Rent, error) {
	ret := _m.Called(ctx, rent)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Rent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Rent) (*models.Rent, error)); ok {
		return rf(ctx, rent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Rent) *models.Rent); ok {
		r0 = rf(ctx, rent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Rent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Rent) error); ok {
		r1 = rf(ctx, rent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RentalRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RentalRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - rent models.Rent
func (_e *RentalRepo_Expecter) Create(ctx interface{}, rent interface{}) *RentalRepo_Create_Call {
	return &RentalRepo_Create_Call{Call: _e.mock.On("Create", ctx, rent)}
}

func (_c *RentalRepo_Create_Call) Run(run func(ctx context.Context, rent models.Rent)) *RentalRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Rent))
	})
	return _c
}

func (_c *RentalRepo_Create_Call) Return(_a0 *models.Rent, _a1 error) *RentalRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RentalRepo_Create_Call) RunAndReturn(run func(context.Context, models.Rent) (*models.Rent, error)) *RentalRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uid
func (_m *RentalRepo) Get(ctx context.Context, uid uuid.UUID) (*models.Rent, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Rent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Rent, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Rent); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Rent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RentalRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RentalRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uid uuid.UUID
func (_e *RentalRepo_Expecter) Get(ctx interface{}, uid interface{}) *RentalRepo_Get_Call {
	return &RentalRepo_Get_Call{Call: _e.mock.On("Get", ctx, uid)}
}

func (_c *RentalRepo_Get_Call) Run(run func(ctx context.Context, uid uuid.UUID)) *RentalRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *RentalRepo_Get_Call) Return(_a0 *models.Rent, _a1 error) *RentalRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RentalRepo_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Rent, error)) *RentalRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRentals provides a mock function with given fields: ctx, username
func (_m *RentalRepo) GetUserRentals(ctx context.Context, username string) ([]models.Rent, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRentals")
	}

	var r0 []models.Rent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Rent, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Rent); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Rent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RentalRepo_GetUserRentals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRentals'
type RentalRepo_GetUserRentals_Call struct {
	*mock.Call
}

// GetUserRentals is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *RentalRepo_Expecter) GetUserRentals(ctx interface{}, username interface{}) *RentalRepo_GetUserRentals_Call {
	return &RentalRepo_GetUserRentals_Call{Call: _e.mock.On("GetUserRentals", ctx, username)}
}

func (_c *RentalRepo_GetUserRentals_Call) Run(run func(ctx context.Context, username string)) *RentalRepo_GetUserRentals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RentalRepo_GetUserRentals_Call) Return(_a0 []models.Rent, _a1 error) *RentalRepo_GetUserRentals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RentalRepo_GetUserRentals_Call) RunAndReturn(run func(context.Context, string) ([]models.Rent, error)) *RentalRepo_GetUserRentals_Call {
	_c.Call.Return(run)
	return _c
}

// NewRentalRepo creates a new instance of RentalRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRentalRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *RentalRepo {
	mock := &RentalRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
