// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for PaymentInfoStatus.
const (
	CANCELED PaymentInfoStatus = "CANCELED"
	PAID     PaymentInfoStatus = "PAID"
)

// CreatePaymentRequest defines model for CreatePaymentRequest.
type CreatePaymentRequest struct {
	// Price Сумма платежа
	Price int `json:"price"`
}

// ErrorDescription defines model for ErrorDescription.
type ErrorDescription struct {
	Error string `json:"error"`
	Field string `json:"field"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Информация об ошибке
	Message string `json:"message"`
}

// PaymentInfo defines model for PaymentInfo.
type PaymentInfo struct {
	// PaymentUid UUID платежа
	PaymentUid openapi_types.UUID `json:"paymentUid"`

	// Price Сумма платежа
	Price int `json:"price"`

	// Status Статус платежа
	Status PaymentInfoStatus `json:"status"`
}

// PaymentInfoStatus Статус платежа
type PaymentInfoStatus string

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	// Errors Массив полей с описанием ошибки
	Errors []ErrorDescription `json:"errors"`

	// Message Информация об ошибке
	Message string `json:"message"`
}

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = CreatePaymentRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создать платеж
	// (POST /api/v1/payment)
	Create(ctx echo.Context) error
	// Отмена платежа
	// (DELETE /api/v1/payment/{paymentUid})
	Cancel(ctx echo.Context, paymentUid openapi_types.UUID) error
	// Информация по платежу
	// (GET /api/v1/payment/{paymentUid})
	Get(ctx echo.Context, paymentUid openapi_types.UUID) error
	// Liveness probe
	// (GET /manage/health)
	Live(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Create converts echo context to params.
func (w *ServerInterfaceWrapper) Create(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Create(ctx)
	return err
}

// Cancel converts echo context to params.
func (w *ServerInterfaceWrapper) Cancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "paymentUid" -------------
	var paymentUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "paymentUid", ctx.Param("paymentUid"), &paymentUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentUid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Cancel(ctx, paymentUid)
	return err
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "paymentUid" -------------
	var paymentUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "paymentUid", ctx.Param("paymentUid"), &paymentUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymentUid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get(ctx, paymentUid)
	return err
}

// Live converts echo context to params.
func (w *ServerInterfaceWrapper) Live(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Live(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/payment", wrapper.Create)
	router.DELETE(baseURL+"/api/v1/payment/:paymentUid", wrapper.Cancel)
	router.GET(baseURL+"/api/v1/payment/:paymentUid", wrapper.Get)
	router.GET(baseURL+"/manage/health", wrapper.Live)

}
