// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CarResponseType.
const (
	MINIVAN  CarResponseType = "MINIVAN"
	ROADSTER CarResponseType = "ROADSTER"
	SEDAN    CarResponseType = "SEDAN"
	SUV      CarResponseType = "SUV"
)

// CarResponse defines model for CarResponse.
type CarResponse struct {
	// Available Флаг, указывающий что автомобиль доступен для бронирования
	Available bool `json:"available"`

	// Brand Марка автомобиля
	Brand string `json:"brand"`

	// CarUid UUID автомобиля
	CarUid openapi_types.UUID `json:"carUid"`

	// Model Модель автомобиля
	Model string `json:"model"`

	// Power Мощность автомобиля в лошадиных силах
	Power *int `json:"power,omitempty"`

	// Price Цена автомобиля за сутки
	Price int `json:"price"`

	// RegistrationNumber Регистрационный номер автомобиля
	RegistrationNumber string `json:"registrationNumber"`

	// Type Тип автомобиля
	Type CarResponseType `json:"type"`
}

// CarResponseType Тип автомобиля
type CarResponseType string

// ErrorDescription defines model for ErrorDescription.
type ErrorDescription struct {
	Error string `json:"error"`
	Field string `json:"field"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Информация об ошибке
	Message string `json:"message"`
}

// PaginationResponse defines model for PaginationResponse.
type PaginationResponse struct {
	Items []CarResponse `json:"items"`

	// Page Номер страницы
	Page int `json:"page"`

	// PageSize Количество элементов на странице
	PageSize int `json:"pageSize"`

	// TotalElements Общее количество элементов
	TotalElements int `json:"totalElements"`
}

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	// Errors Массив полей с описанием ошибки
	Errors []ErrorDescription `json:"errors"`

	// Message Информация об ошибке
	Message string `json:"message"`
}

// ListParams defines parameters for List.
type ListParams struct {
	Page    *float32 `form:"page,omitempty" json:"page,omitempty"`
	Size    *float32 `form:"size,omitempty" json:"size,omitempty"`
	ShowAll *bool    `form:"showAll,omitempty" json:"showAll,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить список всех доступных для бронирования автомобилей
	// (GET /api/v1/cars)
	List(ctx echo.Context, params ListParams) error
	// Получить информацию об автомобиле по car_uid
	// (GET /api/v1/cars/{car_uid})
	Get(ctx echo.Context, carUid openapi_types.UUID) error
	// Забронировать автомобиль
	// (POST /api/v1/cars/{car_uid}/book)
	Book(ctx echo.Context, carUid openapi_types.UUID) error
	// Снять бронь с автомобиля
	// (POST /api/v1/cars/{car_uid}/unbook)
	Unbook(ctx echo.Context, carUid openapi_types.UUID) error
	// Liveness probe
	// (GET /manage/health)
	Live(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// List converts echo context to params.
func (w *ServerInterfaceWrapper) List(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// ------------- Optional query parameter "showAll" -------------

	err = runtime.BindQueryParameter("form", true, false, "showAll", ctx.QueryParams(), &params.ShowAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showAll: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.List(ctx, params)
	return err
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "car_uid" -------------
	var carUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "car_uid", ctx.Param("car_uid"), &carUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter car_uid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get(ctx, carUid)
	return err
}

// Book converts echo context to params.
func (w *ServerInterfaceWrapper) Book(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "car_uid" -------------
	var carUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "car_uid", ctx.Param("car_uid"), &carUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter car_uid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Book(ctx, carUid)
	return err
}

// Unbook converts echo context to params.
func (w *ServerInterfaceWrapper) Unbook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "car_uid" -------------
	var carUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "car_uid", ctx.Param("car_uid"), &carUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter car_uid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Unbook(ctx, carUid)
	return err
}

// Live converts echo context to params.
func (w *ServerInterfaceWrapper) Live(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Live(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/cars", wrapper.List)
	router.GET(baseURL+"/api/v1/cars/:car_uid", wrapper.Get)
	router.POST(baseURL+"/api/v1/cars/:car_uid/book", wrapper.Book)
	router.POST(baseURL+"/api/v1/cars/:car_uid/unbook", wrapper.Unbook)
	router.GET(baseURL+"/manage/health", wrapper.Live)

}
