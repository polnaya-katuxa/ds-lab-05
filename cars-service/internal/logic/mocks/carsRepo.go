// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/polnaya-katuxa/ds-lab-02/cars-service/internal/models"

	uuid "github.com/google/uuid"
)

// CarsRepo is an autogenerated mock type for the carsRepo type
type CarsRepo struct {
	mock.Mock
}

type CarsRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CarsRepo) EXPECT() *CarsRepo_Expecter {
	return &CarsRepo_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, uid
func (_m *CarsRepo) Get(ctx context.Context, uid uuid.UUID) (*models.Car, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Car, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Car); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CarsRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CarsRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uid uuid.UUID
func (_e *CarsRepo_Expecter) Get(ctx interface{}, uid interface{}) *CarsRepo_Get_Call {
	return &CarsRepo_Get_Call{Call: _e.mock.On("Get", ctx, uid)}
}

func (_c *CarsRepo_Get_Call) Run(run func(ctx context.Context, uid uuid.UUID)) *CarsRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CarsRepo_Get_Call) Return(_a0 *models.Car, _a1 error) *CarsRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CarsRepo_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Car, error)) *CarsRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, paginator
func (_m *CarsRepo) List(ctx context.Context, paginator models.CarPaginator) (*models.CarList, error) {
	ret := _m.Called(ctx, paginator)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *models.CarList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CarPaginator) (*models.CarList, error)); ok {
		return rf(ctx, paginator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CarPaginator) *models.CarList); ok {
		r0 = rf(ctx, paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CarList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CarPaginator) error); ok {
		r1 = rf(ctx, paginator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CarsRepo_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CarsRepo_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - paginator models.CarPaginator
func (_e *CarsRepo_Expecter) List(ctx interface{}, paginator interface{}) *CarsRepo_List_Call {
	return &CarsRepo_List_Call{Call: _e.mock.On("List", ctx, paginator)}
}

func (_c *CarsRepo_List_Call) Run(run func(ctx context.Context, paginator models.CarPaginator)) *CarsRepo_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CarPaginator))
	})
	return _c
}

func (_c *CarsRepo_List_Call) Return(_a0 *models.CarList, _a1 error) *CarsRepo_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CarsRepo_List_Call) RunAndReturn(run func(context.Context, models.CarPaginator) (*models.CarList, error)) *CarsRepo_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, car
func (_m *CarsRepo) Update(ctx context.Context, car *models.Car) error {
	ret := _m.Called(ctx, car)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Car) error); ok {
		r0 = rf(ctx, car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CarsRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CarsRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - car *models.Car
func (_e *CarsRepo_Expecter) Update(ctx interface{}, car interface{}) *CarsRepo_Update_Call {
	return &CarsRepo_Update_Call{Call: _e.mock.On("Update", ctx, car)}
}

func (_c *CarsRepo_Update_Call) Run(run func(ctx context.Context, car *models.Car)) *CarsRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Car))
	})
	return _c
}

func (_c *CarsRepo_Update_Call) Return(_a0 error) *CarsRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CarsRepo_Update_Call) RunAndReturn(run func(context.Context, *models.Car) error) *CarsRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewCarsRepo creates a new instance of CarsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCarsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CarsRepo {
	mock := &CarsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
