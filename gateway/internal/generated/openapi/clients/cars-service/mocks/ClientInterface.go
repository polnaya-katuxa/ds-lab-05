// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cars_service "github.com/polnaya-katuxa/ds-lab-02/gateway/internal/generated/openapi/clients/cars-service"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

type ClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientInterface) EXPECT() *ClientInterface_Expecter {
	return &ClientInterface_Expecter{mock: &_m.Mock}
}

// Book provides a mock function with given fields: ctx, carUid, reqEditors
func (_m *ClientInterface) Book(ctx context.Context, carUid uuid.UUID, reqEditors ...cars_service.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, carUid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Book")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, carUid, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, carUid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) error); ok {
		r1 = rf(ctx, carUid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_Book_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Book'
type ClientInterface_Book_Call struct {
	*mock.Call
}

// Book is a helper method to define mock.On call
//   - ctx context.Context
//   - carUid uuid.UUID
//   - reqEditors ...cars_service.RequestEditorFn
func (_e *ClientInterface_Expecter) Book(ctx interface{}, carUid interface{}, reqEditors ...interface{}) *ClientInterface_Book_Call {
	return &ClientInterface_Book_Call{Call: _e.mock.On("Book",
		append([]interface{}{ctx, carUid}, reqEditors...)...)}
}

func (_c *ClientInterface_Book_Call) Run(run func(ctx context.Context, carUid uuid.UUID, reqEditors ...cars_service.RequestEditorFn)) *ClientInterface_Book_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]cars_service.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(cars_service.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(uuid.UUID), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterface_Book_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_Book_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_Book_Call) RunAndReturn(run func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) (*http.Response, error)) *ClientInterface_Book_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, carUid, reqEditors
func (_m *ClientInterface) Get(ctx context.Context, carUid uuid.UUID, reqEditors ...cars_service.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, carUid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, carUid, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, carUid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) error); ok {
		r1 = rf(ctx, carUid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ClientInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - carUid uuid.UUID
//   - reqEditors ...cars_service.RequestEditorFn
func (_e *ClientInterface_Expecter) Get(ctx interface{}, carUid interface{}, reqEditors ...interface{}) *ClientInterface_Get_Call {
	return &ClientInterface_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, carUid}, reqEditors...)...)}
}

func (_c *ClientInterface_Get_Call) Run(run func(ctx context.Context, carUid uuid.UUID, reqEditors ...cars_service.RequestEditorFn)) *ClientInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]cars_service.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(cars_service.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(uuid.UUID), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterface_Get_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) (*http.Response, error)) *ClientInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientInterface) List(ctx context.Context, params *cars_service.ListParams, reqEditors ...cars_service.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cars_service.ListParams, ...cars_service.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cars_service.ListParams, ...cars_service.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cars_service.ListParams, ...cars_service.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ClientInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cars_service.ListParams
//   - reqEditors ...cars_service.RequestEditorFn
func (_e *ClientInterface_Expecter) List(ctx interface{}, params interface{}, reqEditors ...interface{}) *ClientInterface_List_Call {
	return &ClientInterface_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *ClientInterface_List_Call) Run(run func(ctx context.Context, params *cars_service.ListParams, reqEditors ...cars_service.RequestEditorFn)) *ClientInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]cars_service.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(cars_service.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*cars_service.ListParams), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterface_List_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_List_Call) RunAndReturn(run func(context.Context, *cars_service.ListParams, ...cars_service.RequestEditorFn) (*http.Response, error)) *ClientInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Live provides a mock function with given fields: ctx, reqEditors
func (_m *ClientInterface) Live(ctx context.Context, reqEditors ...cars_service.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Live")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...cars_service.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...cars_service.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...cars_service.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_Live_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Live'
type ClientInterface_Live_Call struct {
	*mock.Call
}

// Live is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...cars_service.RequestEditorFn
func (_e *ClientInterface_Expecter) Live(ctx interface{}, reqEditors ...interface{}) *ClientInterface_Live_Call {
	return &ClientInterface_Live_Call{Call: _e.mock.On("Live",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *ClientInterface_Live_Call) Run(run func(ctx context.Context, reqEditors ...cars_service.RequestEditorFn)) *ClientInterface_Live_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]cars_service.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(cars_service.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterface_Live_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_Live_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_Live_Call) RunAndReturn(run func(context.Context, ...cars_service.RequestEditorFn) (*http.Response, error)) *ClientInterface_Live_Call {
	_c.Call.Return(run)
	return _c
}

// Unbook provides a mock function with given fields: ctx, carUid, reqEditors
func (_m *ClientInterface) Unbook(ctx context.Context, carUid uuid.UUID, reqEditors ...cars_service.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, carUid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Unbook")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, carUid, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, carUid, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) error); ok {
		r1 = rf(ctx, carUid, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_Unbook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unbook'
type ClientInterface_Unbook_Call struct {
	*mock.Call
}

// Unbook is a helper method to define mock.On call
//   - ctx context.Context
//   - carUid uuid.UUID
//   - reqEditors ...cars_service.RequestEditorFn
func (_e *ClientInterface_Expecter) Unbook(ctx interface{}, carUid interface{}, reqEditors ...interface{}) *ClientInterface_Unbook_Call {
	return &ClientInterface_Unbook_Call{Call: _e.mock.On("Unbook",
		append([]interface{}{ctx, carUid}, reqEditors...)...)}
}

func (_c *ClientInterface_Unbook_Call) Run(run func(ctx context.Context, carUid uuid.UUID, reqEditors ...cars_service.RequestEditorFn)) *ClientInterface_Unbook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]cars_service.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(cars_service.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(uuid.UUID), variadicArgs...)
	})
	return _c
}

func (_c *ClientInterface_Unbook_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_Unbook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_Unbook_Call) RunAndReturn(run func(context.Context, uuid.UUID, ...cars_service.RequestEditorFn) (*http.Response, error)) *ClientInterface_Unbook_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
