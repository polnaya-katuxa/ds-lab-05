// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CarResponseType.
const (
	MINIVAN  CarResponseType = "MINIVAN"
	ROADSTER CarResponseType = "ROADSTER"
	SEDAN    CarResponseType = "SEDAN"
	SUV      CarResponseType = "SUV"
)

// Defines values for CreateRentalResponseStatus.
const (
	CreateRentalResponseStatusCANCELED   CreateRentalResponseStatus = "CANCELED"
	CreateRentalResponseStatusFINISHED   CreateRentalResponseStatus = "FINISHED"
	CreateRentalResponseStatusINPROGRESS CreateRentalResponseStatus = "IN_PROGRESS"
)

// Defines values for PaymentInfoStatus.
const (
	PAID     PaymentInfoStatus = "PAID"
	REVERSED PaymentInfoStatus = "REVERSED"
)

// Defines values for RentalResponseStatus.
const (
	RentalResponseStatusCANCELED   RentalResponseStatus = "CANCELED"
	RentalResponseStatusFINISHED   RentalResponseStatus = "FINISHED"
	RentalResponseStatusINPROGRESS RentalResponseStatus = "IN_PROGRESS"
	RentalResponseStatusNEW        RentalResponseStatus = "NEW"
)

// CarInfo defines model for CarInfo.
type CarInfo struct {
	// Brand Марка автомобиля
	Brand string `json:"brand"`

	// CarUid UUID автомобиля
	CarUid openapi_types.UUID `json:"carUid"`

	// Model Модель автомобиля
	Model string `json:"model"`

	// RegistrationNumber Регистрационный номер автомобиля
	RegistrationNumber string `json:"registrationNumber"`
}

// CarResponse defines model for CarResponse.
type CarResponse struct {
	// Available Флаг, указывающий что автомобиль доступен для бронирования
	Available bool `json:"available"`

	// Brand Марка автомобиля
	Brand string `json:"brand"`

	// CarUid UUID автомобиля
	CarUid openapi_types.UUID `json:"carUid"`

	// Model Модель автомобиля
	Model string `json:"model"`

	// Power Мощность автомобиля в лошадиных силах
	Power *int `json:"power,omitempty"`

	// Price Цена автомобиля за сутки
	Price int `json:"price"`

	// RegistrationNumber Регистрационный номер автомобиля
	RegistrationNumber string `json:"registrationNumber"`

	// Type Тип автомобиля
	Type CarResponseType `json:"type"`
}

// CarResponseType Тип автомобиля
type CarResponseType string

// CreateRentalRequest defines model for CreateRentalRequest.
type CreateRentalRequest struct {
	// CarUid UUID автомобиля
	CarUid openapi_types.UUID `json:"carUid"`

	// DateFrom Дата начала аренды
	DateFrom string `json:"dateFrom"`

	// DateTo Дата окончания аренды
	DateTo string `json:"dateTo"`
}

// CreateRentalResponse defines model for CreateRentalResponse.
type CreateRentalResponse struct {
	// CarUid UUID автомобиля
	CarUid openapi_types.UUID `json:"carUid"`

	// DateFrom Дата начала аренды
	DateFrom string `json:"dateFrom"`

	// DateTo Дата окончания аренды
	DateTo  string      `json:"dateTo"`
	Payment PaymentInfo `json:"payment"`

	// RentalUid UUID аренды
	RentalUid openapi_types.UUID `json:"rentalUid"`

	// Status Статус аренды
	Status CreateRentalResponseStatus `json:"status"`
}

// CreateRentalResponseStatus Статус аренды
type CreateRentalResponseStatus string

// ErrorDescription defines model for ErrorDescription.
type ErrorDescription struct {
	Error string `json:"error"`
	Field string `json:"field"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Информация об ошибке
	Message string `json:"message"`
}

// PaginationResponse defines model for PaginationResponse.
type PaginationResponse struct {
	Items []CarResponse `json:"items"`

	// Page Номер страницы
	Page int `json:"page"`

	// PageSize Количество элементов на странице
	PageSize int `json:"pageSize"`

	// TotalElements Общее количество элементов
	TotalElements int `json:"totalElements"`
}

// PaymentInfo defines model for PaymentInfo.
type PaymentInfo struct {
	// PaymentUid UUID платежа
	PaymentUid openapi_types.UUID `json:"paymentUid"`

	// Price Сумма платежа
	Price int `json:"price"`

	// Status Статус платежа
	Status PaymentInfoStatus `json:"status"`
}

// PaymentInfoStatus Статус платежа
type PaymentInfoStatus string

// RentalResponse defines model for RentalResponse.
type RentalResponse struct {
	Car CarInfo `json:"car"`

	// DateFrom Дата начала аренды
	DateFrom string `json:"dateFrom"`

	// DateTo Дата окончания аренды
	DateTo  string      `json:"dateTo"`
	Payment PaymentInfo `json:"payment"`

	// RentalUid UUID аренды
	RentalUid openapi_types.UUID `json:"rentalUid"`

	// Status Статус аренды
	Status RentalResponseStatus `json:"status"`
}

// RentalResponseStatus Статус аренды
type RentalResponseStatus string

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	// Errors Массив полей с описанием ошибки
	Errors []ErrorDescription `json:"errors"`

	// Message Информация об ошибке
	Message string `json:"message"`
}

// GetCarsParams defines parameters for GetCars.
type GetCarsParams struct {
	Page    *int  `form:"page,omitempty" json:"page,omitempty"`
	Size    *int  `form:"size,omitempty" json:"size,omitempty"`
	ShowAll *bool `form:"showAll,omitempty" json:"showAll,omitempty"`
}

// BookCarJSONRequestBody defines body for BookCar for application/json ContentType.
type BookCarJSONRequestBody = CreateRentalRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить список всех доступных для бронирования автомобилей
	// (GET /api/v1/cars)
	GetCars(ctx echo.Context, params GetCarsParams) error
	// Получить информацию о всех арендах пользователя
	// (GET /api/v1/rental)
	GetUserRentals(ctx echo.Context) error
	// Забронировать автомобиль
	// (POST /api/v1/rental)
	BookCar(ctx echo.Context) error
	// Отмена аренды автомобиля
	// (DELETE /api/v1/rental/{rentalUid})
	CancelRental(ctx echo.Context, rentalUid openapi_types.UUID) error
	// Информация по конкретной аренде пользователя
	// (GET /api/v1/rental/{rentalUid})
	GetUserRental(ctx echo.Context, rentalUid openapi_types.UUID) error
	// Завершение аренды автомобиля
	// (POST /api/v1/rental/{rentalUid}/finish)
	FinishRental(ctx echo.Context, rentalUid openapi_types.UUID) error
	// Liveness probe
	// (GET /manage/health)
	Live(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCars converts echo context to params.
func (w *ServerInterfaceWrapper) GetCars(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCarsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// ------------- Optional query parameter "showAll" -------------

	err = runtime.BindQueryParameter("form", true, false, "showAll", ctx.QueryParams(), &params.ShowAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showAll: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCars(ctx, params)
	return err
}

// GetUserRentals converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserRentals(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserRentals(ctx)
	return err
}

// BookCar converts echo context to params.
func (w *ServerInterfaceWrapper) BookCar(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BookCar(ctx)
	return err
}

// CancelRental converts echo context to params.
func (w *ServerInterfaceWrapper) CancelRental(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "rentalUid" -------------
	var rentalUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "rentalUid", ctx.Param("rentalUid"), &rentalUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rentalUid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CancelRental(ctx, rentalUid)
	return err
}

// GetUserRental converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserRental(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "rentalUid" -------------
	var rentalUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "rentalUid", ctx.Param("rentalUid"), &rentalUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rentalUid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserRental(ctx, rentalUid)
	return err
}

// FinishRental converts echo context to params.
func (w *ServerInterfaceWrapper) FinishRental(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "rentalUid" -------------
	var rentalUid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "rentalUid", ctx.Param("rentalUid"), &rentalUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rentalUid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FinishRental(ctx, rentalUid)
	return err
}

// Live converts echo context to params.
func (w *ServerInterfaceWrapper) Live(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Live(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/cars", wrapper.GetCars)
	router.GET(baseURL+"/api/v1/rental", wrapper.GetUserRentals)
	router.POST(baseURL+"/api/v1/rental", wrapper.BookCar)
	router.DELETE(baseURL+"/api/v1/rental/:rentalUid", wrapper.CancelRental)
	router.GET(baseURL+"/api/v1/rental/:rentalUid", wrapper.GetUserRental)
	router.POST(baseURL+"/api/v1/rental/:rentalUid/finish", wrapper.FinishRental)
	router.GET(baseURL+"/manage/health", wrapper.Live)

}
